var h=require("path"),f=require("react"),I=require("node:fs/promises"),x=require("html-minifier").minify,F=require("react-dom/server"),{renderToString:w}=F,{readFile:q,writeFile:S,cp:D,readdir:E}=I,m=process.cwd(),y=e=>typeof e=="string"&&e.length>0,O=e=>{let s=h.basename(e,h.extname(e)),r=s.substring(0,s.indexOf(".static"));return`${r.slice(0,1).toLowerCase()}${r.slice(1)}`},b=(e,s,r)=>{if(!e.includes(r))return{};let o=e.indexOf(r)+r.length+1,t=s-2,a=e.substring(o,t);try{let n=JSON.parse(a);return console.log(`${r}`,n),n}catch(n){return console.error(`Can't parse ${a} from html:`,n.message),{}}},j=(e,s,r,o)=>{let t=require(e);if(t.default&&(t=t.default),r.includes("provider"))if(o.store&&o.Provider){let{store:a,Provider:n}=o;return w(f.createElement(n,{store:a},f.createElement(t,{data:s})))}else throw new Error(`You must provide a store and Provider for ${e}`);else return w(f.createElement(t,{data:s}))},A=(e,s,r,o)=>{let t=s.substring(0,r+o),a=s.substring(r+o);return`${t}${e}${a}`},v=async e=>{let s=await E(e,{withFileTypes:!0}),r=await Promise.all(s.map(o=>{let t=h.resolve(e,o.name);return o.isDirectory()?v(t):t}));return Array.prototype.concat(...r)};module.exports=(e={})=>{let s=y(e.outDir)?`${m}/${e.outDir}`:`${m}/out`,r=y(e.pages)?`${m}/${e.pages}`:null,o=e.redux||{store:null,Provider:null},t=[];return{name:"reactStaticPlugin",setup:a=>{a.onStart(async()=>{try{if(!r)throw new Error("Must specify a html page");await D(r,s,{recursive:!0});let i=(await v(s)).map(async l=>new Promise((u,d)=>{q(l,"utf8").then(c=>{c||d(`Can't read file ${l}`),u({path:l,content:c})}).catch(c=>d(c))}));t=await Promise.all(i)}catch(n){console.error("Can't read files",n.message)}}),a.onLoad({filter:/\.static.jsx$/},n=>{let i=n.path,l=O(i),u=`id="${l}">`,d=`data-${l}=`;for(let c=0;c<t.length;c++){let p=t[c],g=x(p.content,{collapseWhitespace:!0,conservativeCollapse:!0,caseSensitive:!0});if(g.includes(u)){let $=g.indexOf(u),P=b(g,$,d),C=j(i,P,n.suffix,o);p.content=A(C,g,$,u.length),console.log("Component:",l),console.log("Injected in:",p.path),console.log("-------------------------------------------"),console.log("-------------------------------------------")}}return{loader:"jsx"}}),a.onEnd(async()=>{for(let n=0;n<t.length;n++){let i=t[n];await S(i.path,i.content)}})}}};