var d=require("path"),g=require("react"),v=require("node:fs/promises"),C=require("html-minifier"),x=require("react-dom/server"),{minify:I}=C,{renderToString:m}=x,{readFile:E,writeFile:F,cp:q,readdir:D}=v,u=process.cwd(),h=t=>typeof t=="string"&&t.length>0,$=async t=>{let r=await D(t,{withFileTypes:!0}),e=await Promise.all(r.map(o=>{let s=d.resolve(t,o.name);return o.isDirectory()?$(s):s}));return Array.prototype.concat(...e)},S=async t=>{let r=[];try{let e=t.map(async o=>new Promise((s,a)=>{E(o,"utf8").then(n=>{n||a(`Can't read file ${o}`);let c=I(n,{caseSensitive:!0,collapseWhitespace:!0,conservativeCollapse:!0});s({path:o,content:c})}).catch(n=>a(n))}));r=await Promise.all(e)}catch(e){console.error("Can't read files",e.message)}finally{return r}},O=t=>{let r=d.basename(t,d.extname(t)),e=r.substring(0,r.indexOf(".static"));return`${e.slice(0,1).toLowerCase()}${e.slice(1)}`},R=t=>{let{content:r,attrData:e,attrId:o,componentPath:s,suffix:a,redux:n}=t,c=r.indexOf(o),i=b(r,c,e),l=j(s,i,a,n);return A(l,r,c,o.length)},b=(t,r,e)=>{if(!t.includes(e))return{};let o=t.indexOf(e)+e.length+1,s=r-2,a=t.substring(o,s);try{let n=JSON.parse(a);return console.log(`${e}`,n),n}catch(n){return console.error(`Can't parse ${a} from html:`,n.message),{}}},j=(t,r,e,o)=>{let s=require(t);s.default&&(s=s.default);let a=g.createElement(s,{data:r});if(e.includes("provider"))if(o.store&&o.Provider){let{store:n,Provider:c}=o;return m(g.createElement(c,{store:n},a))}else throw new Error(`You must provide a store and Provider for ${t}`);else return m(a)},A=(t,r,e,o)=>{let s=r.substring(0,e+o),a=r.substring(e+o);return`${s}${t}${a}`};module.exports=(t={})=>{let r=h(t.outDir)?`${u}/${t.outDir}`:`${u}/out`,e=h(t.pages)?`${u}/${t.pages}`:null,o=t.redux||{store:null,Provider:null},s=[];return{name:"reactStaticPlugin",setup:a=>{a.onStart(async()=>{try{if(!e)throw new Error("Must specify a html page");await q(e,r,{recursive:!0});let n=await $(r);s=await S(n)}catch(n){console.error("Can't get html outputs paths",n.message)}}),a.onLoad({filter:/\.static.jsx$/},n=>{let c=n.path,i=O(c),l=`id="${i}">`,w=`data-${i}=`;for(let p of s){let{content:f,path:y}=p;if(!f.includes(l))continue;let P={redux:o,attrId:l,content:f,attrData:w,componentPath:c,suffix:n.suffix};p.content=R(P),console.log("Component:",i),console.log("Injected in:",y),console.log("-------------------------------------------"),console.log("-------------------------------------------")}return{loader:"jsx"}}),a.onEnd(async()=>{for(let n of s)await F(n.path,n.content)})}}};